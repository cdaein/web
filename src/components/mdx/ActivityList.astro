---
// TODO:
// - handle multiple slugs (array)
//  - if multiple works are exhibited in a single event type,
//  - don't show work title in the list, but show them in individual posting multiple times.

import data from "@data/activities";
import ActivityListItem from "@components/mdx/ActivityListItem.astro";
import type { Activity } from "@data/activities";

type Props = {
  slug: string;
  /** Show separate list per activity type */
  sortByType?: boolean;
  class?: string;
};

const typeLUT = {
  award: "Awards",
  event: "Events",
  exhibition: "Exhibitions",
  featured: "Featured",
  interview: "Interviews",
  lecture: "Lectures",
  publication: "Publications",
  screening: "Screenings",
};

const { slug, sortByType = false, class: className } = Astro.props;

const activities = slug
  ? data.filter((act: Activity) => act.slug === slug)
  : data;

const sortedActivities = activities.reduce(
  (acc: Record<Activity["type"], Activity[]>, activity) => {
    const { type } = activity;

    acc[type] = acc[type] || [];
    acc[type].push(activity);
    return acc;
  },
  {} as Record<Activity["type"], Activity[]>,
);

// all activity types (keys only)
const activityTypes = Object.keys(
  sortedActivities,
) as (keyof typeof sortedActivities)[];

const mapHeader = (type: keyof typeof typeLUT) => typeLUT[type];
---

<section class:list={["activity-wrapper", className]}>
  {
    sortByType ? (
      activityTypes.map((type) => (
        <>
          <h2 class="m-0 pl-0 text-base">{mapHeader(type)}</h2>
          <ul role="list">
            {sortedActivities[type].map((act) => (
              <ActivityListItem data={act} />
            ))}
          </ul>
        </>
      ))
    ) : (
      <ul role="list">
        {activities.map((act) => (
          <ActivityListItem data={act} />
        ))}
      </ul>
    )
  }
</section>
