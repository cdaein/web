---
import moment from "moment";
import type { CollectionEntry } from "astro:content";
import { camelcase } from "@scripts/utils";

// REVIEW: is there a type for this?
// - the name should be PostProps
export type PageProps = {
  title: string;
  description?: string;
  date: string;
  category?: string;
  tags?: string[];
  draft?: boolean;
  file: string;
  url: string;
};

type Props = {
  page: PageProps;
  prevPost?: CollectionEntry<"work" | "writing">;
  nextPost?: CollectionEntry<"work" | "writing">;
  class?: string;
};

// const { page, class: className } = Astro.props;
const {
  page: { title, description, date, category, tags, draft },
  class: className,
} = Astro.props;

// if not root, add page navagation
const pathname = Astro.url.pathname;
const isRoot = pathname === "/";
---

<article
  draggable={false}
  class:list={[
    "border-b border-b-black h-18 leading-snug z-10",
    !isRoot && "fixed top-9 w-full bg-white",
    className,
  ]}
>
  <div class:list={["py-1 grid grid-cols-12 gap-x-2 md:gap-x-8"]}>
    <h1
      class="pl-4 col-start-1 col-end-10
      md:pl-4 md:col-end-5
      lg:col-end-4
      flex justify-start"
    >
      {draft && "(draft)"}{title}
    </h1>
    <span
      class="hidden col-start-4 col-end-9
      md:col-start-5 md:col-end-11 md:flex
      lg:col-start-4 lg:col-end-9
      justify-start"
      >{
        description && description[description.length - 1] === "."
          ? description?.substring(0, description.length - 1)
          : description
      }</span
    >
    <!-- <span -->
    <!--   class="hidden col-start-8 col-end-12 -->
    <!--   lg:col-start-10 lg:col-end-12 lg:flex -->
    <!--   justify-start" -->
    <!--   >{category && camelcase(`${category}`)}</span -->
    <!-- > -->
    <!-- <span -->
    <!--   class="pr-4 col-start-11 col-end-13 -->
    <!--   lg:col-start-12 -->
    <!--   flex justify-end" -->
    <!--   >{moment(date).year()}</span -->
    <!-- > -->
    <!-- <span class="col-start-4 col-end-12 flex justify-start" -->
    <!--   >{tags && tags.map((tag: any) => `${tag}`)}</span -->
    <!-- > -->
  </div>
</article>
