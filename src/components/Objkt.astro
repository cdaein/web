---
// TODO:
// - link to objkt.com page instead of mp4 file for live view.

import { getEntry } from "astro:content";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import path from "node:path";

interface Props {
  title: string;
  numCols: number;
}
interface Token {
  name: string;
  token_id: string;
  thumbnail_uri: string;
  artifact_uri: string;
  display_uri: string;
  fa: {
    path: string;
  };
  extra: {
    uri: string;
    mime_type: "video/mp4" | "image/jpeg";
    dimensions: {
      value: "480x480";
    };
  }[];
}

const { numCols, title } = Astro.props;

// get data from local JSON files
// need to do sorting because other data is sorted by image filenames (allTokenImagesObj)
const tokenData = ((await getEntry("objkt", title))!.data as Token[]).sort(
  (a, b) => Number(a.name) - Number(b.name),
);

// first, get all token images
const allTokenImagesObj = import.meta.glob<{ default: ImageMetadata }>(
  "/src/content/work/**/tokens/*.jpeg",
);

// filter the ones that belong to current token (via props.title)
// then, use to find the object string key in <Image />
// https://docs.astro.build/en/recipes/dynamically-importing-images/
const imagePaths = Object.keys(allTokenImagesObj).filter((key) =>
  key.includes(title),
);

// allTokensImageObj has data from OTHER collections, so we'll need to filter only the ones that belong to this collection
// by comparing to token images that are already prepared in "tokens" folder (manually hand-picked).
const tokenNames = Object.keys(allTokenImagesObj).flatMap((key) => {
  return path.basename(key).split(".")[0];
});

const collection = tokenData.filter((token, i) => {
  return tokenNames.find((name) => name === token.name);
});
---

<style define:vars={{ numCols }}>
  div.thumbnail-grid {
    display: grid;
    grid-template-columns: repeat(var(--numCols), 1fr);
    gap: 4px 4px;
  }
  div.thumbnail-image {
    img {
      background: #eee;
      display: block;
    }
    img:hover {
      border: 2px lightgray solid;
    }
  }
</style>

<div class="thumbnail-grid">
  {
    collection.map((token: Token, i: number) => {
      // const liveUrl = `https://ipfs.io/ipfs/${token.artifact_uri.slice(7)}`;
      const liveUrl = `https://objkt.com/tokens/${token.fa.path}/${token.token_id}`;

      return (
        <div class="thumbnail-image" id={token.name}>
          {/* <p>{token.name}</p> */}
          <a href={liveUrl} target="_blank">
            {/* i'm assuming paths are in the correct order of token iterations */}
            <Image src={allTokenImagesObj[imagePaths[i]]()} alt="thumbnail" />
          </a>
        </div>
      );
    })
  }
</div>
