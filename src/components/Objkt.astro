---
// TODO:
// - link to objkt.com page instead of mp4 file for live view.

import { getEntry } from "astro:content";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import path from "node:path";
import { gridCols } from "@data/tailwindLUT";

interface Props {
  title: string;
  caption?:string;
  maxCols: keyof typeof gridCols;
  noGap?: boolean;
  class?:string;
  captionClass?:string;
}
interface Token {
  name: string;
  token_id: string;
  thumbnail_uri: string;
  artifact_uri: string;
  display_uri: string;
  fa: {
    path: string;
  };
  extra: {
    uri: string;
    mime_type: "video/mp4" | "image/jpeg";
    dimensions: {
      value: "480x480";
    };
  }[];
}

const { maxCols, title, caption, noGap, class: className, captionClass} = Astro.props;

// get data from local JSON files
// need to do sorting because other data is sorted by image filenames (allTokenImagesObj)
const allTokenData = ((await getEntry("objkt", title))!.data as Token[]).sort(
  (a, b) => Number(a.name) - Number(b.name),
);

// first, get all token images
const allTokenImagesObj = import.meta.glob<{ default: ImageMetadata }>(
  "/src/content/work/**/tokens/*.jpeg",
);

// filter the ones that belong to current token (via props.title)
// then, use to find the object string key in <Image />
// https://docs.astro.build/en/recipes/dynamically-importing-images/
const imagePaths = Object.keys(allTokenImagesObj).filter((key) =>
  key.includes(title),
);

// allTokensImageObj has data from OTHER collections, so we'll need to filter only the ones that belong to this collection
// by comparing to token images that are already prepared in "tokens" folder (manually hand-picked).
const tokenNames = Object.keys(imagePaths).flatMap((key: any) => {
  return path.basename(imagePaths[key]).split(".")[0];
});

const collection = allTokenData.filter((token) => {
  return tokenNames.find((name) => name === token.name);
});
---

<style>
  div.thumbnail-image {
    img {
      background: #eee;
      display: block;
    }
    img:hover {
      border: 2px black solid;
    }
  }
</style>

<figure class:list={["objkt-grid"]}>
  <div class:list={["grid", gridCols[maxCols], !noGap && "gap-1", className]}>
    {
      collection.map((token: Token, i: number) => {
        // const liveUrl = `https://ipfs.io/ipfs/${token.artifact_uri.slice(7)}`;
        const liveUrl = `https://objkt.com/tokens/${token.fa.path}/${token.token_id}`;

        return (
          <div class="thumbnail-image" id={token.name}>
            <a href={liveUrl} target="_blank">
              <Image src={allTokenImagesObj[imagePaths[i]]()} alt=`${title} ${token.name}` title=`${title} ${token.name}` class:list={["w-full", "h-full", "object-cover", className]} />
            </a>
          </div>
        );
      })
    }
  </div>

  {
    caption && 
      <figcaption class:list={["mt-2 mx-2 text-base leading-tight", captionClass]}>
        {caption}
      </figcaption>
  }

</figure>
