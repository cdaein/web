---
// NOTE:
// - this component is good for fully-minted fxhash project as data is already available locally.

// TODO:
//  - lazyload image backgrouned: single representative color (or blurred)

import { getEntry } from "astro:content";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { gridCols, mdGridCols, lgGridCols } from "@data/tailwindLUT";

interface Props {
  title: string;
  caption?:string;
  /** In small or medium, it may be set less than maxCols value*/
  maxCols: keyof typeof gridCols;
  from?: number;
  to?: number;
  tokens?: number[];
  noGap?: boolean
  /** Additional styling */
  class?:string
  /** Additional styling for caption */
  captionClass?:string
}
interface Iteration {
  name: string;
  generationHash: string;
  metadata: {
    displayUri: string;
    generatorUri: string;
    artifactUri: string; // full ipfs url including unique hash
  };
}

const { maxCols, title, caption, from, to, tokens, noGap, class:className, captionClass } = Astro.props;

// get data from local JSON files
const tokenData = await getEntry("fxhash", title);
const collection = tokenData!.data.entireCollection as Iteration[];

// first, get all token images
const allTokenImagesObj = import.meta.glob<{ default: ImageMetadata }>(
  "/src/content/work/**/tokens/*.png",
);

// filter the ones that belong to current token (via props.title)
// then, use to find the object string key in <Image />
// https://docs.astro.build/en/recipes/dynamically-importing-images/
const imagePaths = Object.keys(allTokenImagesObj).filter((key) =>
  key.includes(title),
);

// if too many column, use responsive settings for sm/md screen
const cols = maxCols >= 8 ? [mdGridCols[maxCols], gridCols[4]] : [gridCols[maxCols]]
---

<figure class:list={["fxhash-grid"]}>
  <div class:list={["grid", ...cols, !noGap && "gap-1", className]}>
  {
    collection.map((iteration: Iteration, i: number) => {
      if (from && i < from) return;
      if (to && i >= to) return;
      if (tokens && !tokens.includes(i)) return;

      const liveUrl = `https://ipfs.io/ipfs/${iteration.metadata.artifactUri.slice(7)}`;

      return (
        <div class="thumbnail-wrapper block bg-gray-300" id={iteration.generationHash}>
          <a href={liveUrl} target="_blank">
            {/* i'm assuming paths are in the correct order of token iterations */}
            <Image
              src={allTokenImagesObj[imagePaths[i]]()}
              alt=`${iteration.name}`
              title=`${iteration.name}`
              class="hover:border-black hover:border-2"
            />
          </a>
        </div>
      );
    })
  }
  </div>
  {
    caption && 
      <figcaption class:list={["mt-2 mx-2 text-base leading-tight", captionClass]}>
        {caption}
      </figcaption>
  }
</figure>
