---
// NOTE:
// - this component is good for fully-minted fxhash project as data is already available locally.

import { getEntry } from "astro:content";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
  title: string;
  numCols: number;
  imagesPath: string;
}
interface Iteration {
  name: string;
  generationHash: string;
  metadata: {
    displayUri: string;
    generatorUri: string;
    artifactUri: string; // full ipfs url including unique hash
  };
}

// TODO: numCols => maxCols (depending on fully-minted or not)
const { numCols, title } = Astro.props;

// get data from local JSON files
const tokenData = await getEntry("fxhash", title);
const collection = tokenData!.data.entireCollection as Iteration[];

// first, get all token images
const allTokenImagesObj = import.meta.glob<{ default: ImageMetadata }>(
  "/src/content/work/**/tokens/*.png",
);

// filter the ones that belong to current token (via props.title)
// then, use to find the object string key in <Image />
// https://docs.astro.build/en/recipes/dynamically-importing-images/
const imagePaths = Object.keys(allTokenImagesObj).filter((key) =>
  key.includes(title),
);
---

<style define:vars={{ numCols }}>
  div.thumbnail-grid {
    display: grid;
    grid-template-columns: repeat(var(--numCols), 1fr);
    gap: 4px 4px;
  }
  div.thumbnail-image {
    img {
      display: block;
    }
    img:hover {
      border: 2px lightgray solid;
    }
  }
</style>

<p>Click a thumbnail image below to see a live version.</p>
<div class="thumbnail-grid">
  {
    collection.map((iteration: Iteration, i: number) => {
      const liveUrl = `https://ipfs.io/ipfs/${iteration.metadata.artifactUri.slice(7)}`;

      return (
        <div class="thumbnail-image" id={iteration.generationHash}>
          <a href={liveUrl} target="_blank">
            {/* i'm assuming paths are in the correct order of token iterations */}
            <Image src={allTokenImagesObj[imagePaths[i]]()} alt="thumbnail" />
          </a>
        </div>
      );
    })
  }
</div>
